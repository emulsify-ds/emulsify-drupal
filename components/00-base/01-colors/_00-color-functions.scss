// Convert color values to desired format.
// Returns hex by default.
// Optionally returns rgb, rgba, hsl, or hsla.
@function cnvrt-clr($color, $format: null) {
  @if (type-of($color) == color) {
    @if ($format == null or $format == 'hex') {
      $ie-hex: ie_hex_str($color);
      @return unquote('#' + str_slice($ie-hex, 4));
    } @else if ($format == 'rgb') {
      @return red($color), green($color), blue($color);
    } @else if ($format == 'rgba') {
      @return red($color), green($color), blue($color), opacity($color);
    } @else if ($format == 'hsl') {
      @return hue($color), saturation($color), lightness($color);
    } @else if ($format == 'hsla') {
      @return hue($color), saturation($color), lightness($color),
        opacity($color);
    } @else {
      @error "#{$format} is not a valid color format";
    }
  } @else {
    @error "#{$color} is not a valid color";
  }
}
// This color function makes it easy for you to call a color by it's
// functional name anywhere you need.
// E.g. to use a color labeled `background`, just pass the name: `color: clr(background);`
// Color palettes and branding guidelines often have similar color variants.
// The clr() function allows for comma separated options for color variants
// and alpha properties. The following are valid examples if the $color-palette
// map defined in _01-color-definitions.scss is properly structured:
// [style]: clr(background);
// [style]: clr(background, 0.65);
// [style]: clr(background, inverse);
// [style]: clr(background, inverse, 0.65);

// How it works:
// This function works in conjunction with the dynamic css custom properties
// defined in the _01-color-definitions.scss. The item called in the
// function is prefixed with `var(--c-` to call the custom property for that color.
// E.g. `color: clr(background);` will compile to `color: hsla(var(--c-background), 1);`

// A format that accepts alpha properties is required. Change the $format variable
// to 'rgb' in or to set the default output of the function as an rgba() value.
$format: 'hsl';
@function clr(
  $name,
  $variant: null,
  $alpha: 1,
  $theme: default,
  $format: #{$format}
) {
  // Coverage: clr(text)
  @if ($variant == null) {
    @if (type-of(map-get(map-get($color-palette, $theme), $name)) == map) {
      @return $format#{'a('} var(--c-#{$name}, cnvrt-clr(map-get(map-get(map-get($color-palette, $theme), $name), 'base'), $format)),
        $alpha #{')'};
    } @else {
      @return $format#{'a('} var(--c-#{$name}, cnvrt-clr(map-get(map-get($color-palette, $theme), $name), $format)),
        $alpha #{')'};
    }
  }
  // Return variant as alpha value.
  // Coverage: clr(text, 0.5), clr(text, 0.5, contrast)
  @if ($variant != null and type-of($variant) == number) {
    @if (map-has-key($color-palette, $alpha)) {
      // Return color value if it doesn't have variations or assume
      // the base color from multi-dimensional array.
      @if (type-of(map-get(map-get($color-palette, $theme), $name)) == map) {
        @return $format#{'a('} var(--c-#{$name}-#{$alpha}, cnvrt-clr(map-get(map-get(map-get($color-palette, $theme), $name), 'base'), $format)),
          $variant #{')'};
      } @else {
        @return $format#{'a('} var(--c-#{$name}-#{$alpha}, cnvrt-clr(map-get(map-get($color-palette, $theme), $name), $format)),
          $variant #{')'};
      }
    } @else {
      @if (type-of(map-get(map-get($color-palette, $theme), $name)) == map) {
        @return $format#{'a('} var(--c-#{$name}, cnvrt-clr(map-get(map-get(map-get($color-palette, $theme), $name), 'base'), $format)),
          $variant #{')'};
      } @else {
        @return $format#{'a('} var(--c-#{$name}, cnvrt-clr(map-get(map-get($color-palette, $theme), $name), $format)),
          $variant #{')'};
      }
    }
  }
  // Coverage: clr(text, inverse),
  // clr(text, inverse, 0.5), clr(text, contrast), clr(text, contrast, 0.5),
  // clr(text, inverse, contrast), clr(text, inverse, 0.5, contrast)
  @if ($variant != null and type-of($variant) == string) {
    // Return theme specific color if it's defined.
    // Coverage: clr(text, contrast), clr(text, contrast, 0.5)
    @if (map-has-key($color-palette, $variant)) {
      @if (type-of(map-get(map-get($color-palette, $theme), $name)) == map) {
        @return $format#{'a('} var(--c-#{$name}-#{$variant}, cnvrt-clr(map-get(map-get(map-get($color-palette, $variant), $name), 'base'), $format)),
          $alpha #{')'};
      } @else {
        @return $format#{'a('} var(--c-#{$name}-#{$variant}, cnvrt-clr(map-get(map-get($color-palette, $variant), $name), $format)),
          $alpha #{')'};
      }
    }
    // Coverage: clr(text, inverse), clr(text, inverse, 0.5),
    // clr(text, inverse, contrast), clr(text, inverse, 0.5, contrast)
    @if (type-of(map-get(map-get($color-palette, $theme), $name)) == map) {
      // Coverage: clr(text, inverse),
      // clr(text, inverse, 0.5), clr(text, contrast, 0.5),
      // clr(text, inverse, 0.5, contrast)
      @if (type-of($alpha) == number) {
        @if (
          map-has-key($color-palette, $variant) and
            type-of(map-get(map-get($color-palette, $variant), $name)) ==
            map
        ) {
          @return $format#{'a('} var(--c-#{$name}-#{$variant}, cnvrt-clr(map-get(map-get(map-get($color-palette, $variant), $name), 'base'), $format)),
            $alpha #{')'};
        } @else {
          @if (
            type-of(map-get(map-get($color-palette, $theme), $name)) == map
          ) {
            @return $format#{'a('} var(--c-#{$name}-#{$variant}, cnvrt-clr(map-get(map-get(map-get($color-palette, $theme), $name), 'base'), $format)),
              $alpha #{')'};
          } @else {
            @return $format#{'a('} var(--c-#{$name}-#{$variant}, cnvrt-clr(map-get(map-get(map-get($color-palette, $theme), $name), $variant), $format)),
              $alpha #{')'};
          }
        }
      }
      // Coverage: clr(text, inverse, contrast)
      @else if (map-has-key($color-palette, $alpha)) {
        @return $format#{'a('} var(--c-#{$name}-#{$variant}-#{$alpha}, cnvrt-clr(map-get(map-get(map-get($color-palette, $alpha), $name), $variant), $format)),
          1 #{')'};
      } @else {
        @error "Property #{$alpha} must be either an alpha number or theme name.";
      }
    } @else {
      @return $format#{'a('} var(--c-#{$name}-#{$variant}, cnvrt-clr(map-get(map-get(map-get($color-palette, $theme), $name), $variant), $format)),
        $alpha #{')'};
    }
  }
}
